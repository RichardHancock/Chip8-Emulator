#include "Chip8.h"

unsigned char chip8FontSet[80] =
{
	0xF0, 0x90, 0x90, 0x90, 0xF0, //0
	0x20, 0x60, 0x20, 0x20, 0x70, //1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
	0x90, 0x90, 0xF0, 0x10, 0x10, //4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
	0xF0, 0x10, 0x20, 0x40, 0x40, //7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, //9
	0xF0, 0x90, 0xF0, 0x90, 0x90, //A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, //B
	0xF0, 0x80, 0x80, 0x80, 0xF0, //C
	0xE0, 0x90, 0x90, 0x90, 0xE0, //D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
	0xF0, 0x80, 0xF0, 0x80, 0x80  //F
};

Chip8::Chip8()
{
	reset();
}

void Chip8::reset()
{
	pc = 0x200; //Start at the Game in memory
	opcode = 0;
	I = 0;
	sp = 0;

	//Clear Screen
	for (int i = 0; i < WIDTH * HEIGHT; i++)
	{
		screen[i] = 0;
	}

	//Clear Memory
	for (int i = 0; i < MEMORY_SIZE; i++)
	{
		memory[i] = 0;
	}

	//Clear Stack/Keys/Registers
	for (int i = 0; i < 16; i++)
	{
		V[i] = key[i] = 0;
		// Needs to be seperate as diff type, don't really want to add casts for a one time op.
		stack[i] = 0; 
	}

	//Reset Timers
	delayTimer = soundTimer = 0;


	//Load Fontset
	for (int i = 0; i < 80; i++)
	{
		memory[i] = chip8FontSet[i];
	}
}

void Chip8::emulateCycle()
{
	// Fetch Opcode
	// Decode Opcode
	// Execute Opcode

	// Update timers
}

bool Chip8::isDrawFlagSet()
{
	return drawFlag;
}
